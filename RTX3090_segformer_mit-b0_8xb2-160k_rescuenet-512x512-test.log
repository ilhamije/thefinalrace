nohup: ignoring input
03/21 19:00:39 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.10.12 (main, Feb  4 2025, 14:57:36) [GCC 11.4.0]
    CUDA available: True
    MUSA available: False
    numpy_random_seed: 29649818
    GPU 0,1,2,3: NVIDIA GeForce RTX 3090
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 12.4, V12.4.131
    GCC: x86_64-linux-gnu-gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0
    PyTorch: 1.12.1+cu113
    PyTorch compiling details: PyTorch built with:
  - GCC 9.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.3.2  (built against CUDA 11.5)
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.3.2, CXX_COMPILER=/opt/rh/devtoolset-9/root/usr/bin/c++, CXX_FLAGS= -fabi-version=11 -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.12.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.13.1+cu113
    OpenCV: 4.11.0
    MMEngine: 0.10.7

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    gpus: 2
    seed: 29649818
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

03/21 19:00:40 - mmengine - INFO - Config:
checkpoint = 'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b0_20220624-7e0fe6dd.pth'
crop_size = (
    512,
    512,
)
data_preprocessor = dict(
    bgr_to_rgb=True,
    mean=[
        123.675,
        116.28,
        103.53,
    ],
    pad_val=0,
    seg_pad_val=255,
    size=(
        512,
        512,
    ),
    std=[
        58.395,
        57.12,
        57.375,
    ],
    type='SegDataPreProcessor')
data_root = 'data/rescuenet/'
dataset_type = 'RescueNetDataset'
default_hooks = dict(
    checkpoint=dict(by_epoch=False, interval=16000, type='CheckpointHook'),
    logger=dict(interval=50, log_metric_by_epoch=False, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(draw=True, interval=1, type='SegVisualizationHook'))
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    dist_cfg=dict(backend='nccl'),
    gpus=2,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
gpu_ids = [
    0,
    1,
]
img_ratios = [
    0.5,
    0.75,
    1.0,
    1.25,
    1.5,
    1.75,
]
img_scale = (
    1500,
    1125,
)
launcher = 'none'
load_from = 'work_dirs/RTX3090_segformer_mit-b0_8xb2-160k_rescuenet-512x512/iter_160000.pth'
log_level = 'INFO'
log_processor = dict(by_epoch=False)
model = dict(
    backbone=dict(
        attn_drop_rate=0.0,
        drop_path_rate=0.1,
        drop_rate=0.0,
        embed_dims=32,
        in_channels=3,
        init_cfg=dict(
            checkpoint=
            'https://download.openmmlab.com/mmsegmentation/v0.5/pretrain/segformer/mit_b0_20220624-7e0fe6dd.pth',
            type='Pretrained'),
        mlp_ratio=4,
        num_heads=[
            1,
            2,
            5,
            8,
        ],
        num_layers=[
            2,
            2,
            2,
            2,
        ],
        num_stages=4,
        out_indices=(
            0,
            1,
            2,
            3,
        ),
        patch_sizes=[
            7,
            3,
            3,
            3,
        ],
        qkv_bias=True,
        sr_ratios=[
            8,
            4,
            2,
            1,
        ],
        type='MixVisionTransformer'),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        pad_val=0,
        seg_pad_val=255,
        size=(
            512,
            512,
        ),
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='SegDataPreProcessor'),
    decode_head=dict(
        align_corners=False,
        channels=256,
        dropout_ratio=0.1,
        in_channels=[
            32,
            64,
            160,
            256,
        ],
        in_index=[
            0,
            1,
            2,
            3,
        ],
        loss_decode=dict(
            loss_weight=1.0, type='CrossEntropyLoss', use_sigmoid=False),
        norm_cfg=dict(requires_grad=True, type='SyncBN'),
        num_classes=19,
        type='SegformerHead'),
    pretrained=None,
    test_cfg=dict(crop_size=(
        512,
        512,
    ), mode='slide', stride=(
        318,
        318,
    )),
    train_cfg=dict(find_unused_parameters=True),
    type='EncoderDecoder')
norm_cfg = dict(requires_grad=True, type='SyncBN')
optim_wrapper = dict(
    optimizer=dict(
        betas=(
            0.9,
            0.999,
        ), lr=0.00018, type='AdamW', weight_decay=0.01),
    paramwise_cfg=dict(
        custom_keys=dict(
            head=dict(lr_mult=10.0),
            norm=dict(decay_mult=0.0),
            pos_block=dict(decay_mult=0.0))),
    type='OptimWrapper')
optimizer = dict(lr=0.01, momentum=0.9, type='SGD', weight_decay=0.0005)
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=1500, start_factor=1e-06,
        type='LinearLR'),
    dict(
        begin=1500,
        by_epoch=False,
        end=160000,
        eta_min=0.0,
        power=1.0,
        type='PolyLR'),
]
resume = False
test_cfg = dict(type='TestLoop')
test_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(img_path='img_dir/test', seg_map_path='ann_dir/test'),
        data_root='data/rescuenet/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=False, scale=(
                1500,
                1125,
            ), type='Resize'),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='RescueNetDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(keep_ratio=False, scale=(
        1500,
        1125,
    ), type='Resize'),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs'),
]
train_cfg = dict(
    max_iters=160000, type='IterBasedTrainLoop', val_interval=16000)
train_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(
            img_path='img_dir/train', seg_map_path='ann_dir/train'),
        data_root='data/rescuenet/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(reduce_zero_label=True, type='LoadAnnotations'),
            dict(keep_ratio=False, scale=(
                1500,
                1125,
            ), type='Resize'),
            dict(
                cat_max_ratio=0.75, crop_size=(
                    512,
                    512,
                ), type='RandomCrop'),
            dict(prob=0.5, type='RandomFlip'),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs'),
        ],
        type='RescueNetDataset'),
    num_workers=8,
    persistent_workers=True,
    pin_memory=True,
    sampler=dict(shuffle=True, type='InfiniteSampler'))
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(reduce_zero_label=True, type='LoadAnnotations'),
    dict(keep_ratio=False, scale=(
        1500,
        1125,
    ), type='Resize'),
    dict(cat_max_ratio=0.75, crop_size=(
        512,
        512,
    ), type='RandomCrop'),
    dict(prob=0.5, type='RandomFlip'),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs'),
]
tta_model = dict(type='SegTTAModel')
tta_pipeline = [
    dict(backend_args=None, type='LoadImageFromFile'),
    dict(
        transforms=[
            [
                dict(keep_ratio=True, scale_factor=0.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=0.75, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.0, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.25, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.5, type='Resize'),
                dict(keep_ratio=True, scale_factor=1.75, type='Resize'),
            ],
            [
                dict(direction='horizontal', prob=0.0, type='RandomFlip'),
                dict(direction='horizontal', prob=1.0, type='RandomFlip'),
            ],
            [
                dict(type='LoadAnnotations'),
            ],
            [
                dict(type='PackSegInputs'),
            ],
        ],
        type='TestTimeAug'),
]
val_cfg = dict(type='ValLoop')
val_dataloader = dict(
    batch_size=2,
    dataset=dict(
        data_prefix=dict(img_path='img_dir/val', seg_map_path='ann_dir/val'),
        data_root='data/rescuenet/',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(keep_ratio=False, scale=(
                1500,
                1125,
            ), type='Resize'),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs'),
        ],
        type='RescueNetDataset'),
    num_workers=4,
    persistent_workers=True,
    sampler=dict(shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    iou_metrics=[
        'mIoU',
    ], type='IoUMetric')
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='SegLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/RTX3090_segformer_mit-b0_8xb2-160k_rescuenet-512x512'

/workspace/thefinalrace/mmseg/models/losses/cross_entropy_loss.py:250: UserWarning: Default ``avg_non_ignore`` is False, if you would like to ignore the certain label and average loss over non-ignore labels, which is the same with PyTorch official cross_entropy, set ``avg_non_ignore=True``.
  warnings.warn(
03/21 19:00:43 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
03/21 19:00:43 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
03/21 19:00:43 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
Loads checkpoint by local backend from path: work_dirs/RTX3090_segformer_mit-b0_8xb2-160k_rescuenet-512x512/iter_160000.pth
03/21 19:00:44 - mmengine - INFO - Load checkpoint from work_dirs/RTX3090_segformer_mit-b0_8xb2-160k_rescuenet-512x512/iter_160000.pth
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
03/21 19:49:21 - mmengine - INFO - Iter(test) [ 50/225]    eta: 2:46:47  time: 57.1464  data_time: 56.9077  memory: 2510  
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
03/21 20:38:03 - mmengine - INFO - Iter(test) [100/225]    eta: 2:00:26  time: 58.5958  data_time: 58.3562  memory: 2510  
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
03/21 21:26:05 - mmengine - INFO - Iter(test) [150/225]    eta: 1:12:14  time: 53.7355  data_time: 53.5000  memory: 2508  
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
03/21 21:35:09 - mmengine - WARNING - Image shapes are different in the batch.
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
03/21 22:13:15 - mmengine - INFO - Iter(test) [200/225]    eta: 0:23:57  time: 53.1885  data_time: 52.9525  memory: 2578  
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
Image size: torch.Size([1125, 1500])
Input 0 shape[1:]: torch.Size([1125, 1500])
Input 1 shape[1:]: torch.Size([1125, 1500])
03/21 22:38:14 - mmengine - INFO - per class results:
03/21 22:38:14 - mmengine - INFO - 
+----------------------------+-------+-------+
|           Class            |  IoU  |  Acc  |
+----------------------------+-------+-------+
|         background         | 70.86 | 80.81 |
|           water            | 83.01 | 92.63 |
|     building-no-damage     | 67.31 |  78.7 |
|   building-medium-damage   | 57.86 |  72.4 |
|   building-major-damage    | 57.83 | 80.73 |
| building-total-destruction | 60.03 | 77.71 |
|          vehicle           | 63.29 | 76.69 |
|         road-clear         | 78.46 | 87.23 |
|        road-blocked        | 81.63 | 91.87 |
|            tree            | 76.03 | 82.96 |
|            pool            | 80.34 | 89.55 |
+----------------------------+-------+-------+
03/21 22:38:14 - mmengine - INFO - Iter(test) [225/225]    aAcc: 86.1700  mIoU: 70.6000  mAcc: 82.8400  data_time: 57.4834  time: 57.7344
